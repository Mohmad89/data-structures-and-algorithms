/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge36;

import challenge36.data.Vertex;
import challenge36.structure.Graph;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void breadthFirstTest1() {
        Graph graph = new Graph();
        System.out.println(graph.addNode("A"));
        System.out.println(graph.addNode("B"));
        System.out.println(graph.addNode("C"));
        System.out.println(graph.addNode("D"));
        System.out.println(graph.getNode());
        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("C"));


        assertEquals("[A, B, C, D]", graph.breadthFirst(new Vertex("A")).toString());
    }

    @Test
    void breadthFirstTest2() {
        Graph graph = new Graph();
        System.out.println(graph.addNode("A"));
        System.out.println(graph.addNode("B"));
        System.out.println(graph.addNode("C"));
        System.out.println(graph.addNode("D"));
        System.out.println(graph.getNode());
        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("C"));


        assertEquals("[B, A, D, C]", graph.breadthFirst(new Vertex("B")).toString());
    }

    @Test
    void breadthFirstTeas3() {
        Graph graph = new Graph();
        System.out.println(graph.addNode("A"));
        System.out.println(graph.addNode("B"));
        System.out.println(graph.addNode("C"));
        System.out.println(graph.addNode("D"));
        System.out.println(graph.getNode());
        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("C"));

        assertEquals("[D, B, C, A]", graph.breadthFirst(new Vertex("D")).toString());
    }

    @Test
    void depthFirstTest1() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("F");

        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("F"));

        assertEquals("[B, A, C, D, F]", graph.depthFirst(new Vertex("B")).toString());
    }

    @Test
    void depthFirstTest2() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("F");

        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("F"));

        assertEquals("[A, B, D, F, C]", graph.depthFirst(new Vertex("A")).toString());
    }


    @Test
    void depthFirstTest3() {
        Graph graph = new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("F");

        graph.addEdge(new Vertex("A"), new Vertex("B"));
        graph.addEdge(new Vertex("A"), new Vertex("C"));
        graph.addEdge(new Vertex("B"), new Vertex("D"));
        graph.addEdge(new Vertex("D"), new Vertex("F"));

        assertEquals("[C, A, B, D, F]", graph.depthFirst(new Vertex("C")).toString());
    }

}
