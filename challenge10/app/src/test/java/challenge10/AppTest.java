/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge10;

import challenge10.QueueStructure.Queue;
import challenge10.QueueStructure.QueueNode;
import challenge10.StackStructure.Stack;
import challenge10.StackStructure.StackNode;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void pushOneValueIntoStack () {
        Stack stack = new Stack();
        stack.push(new StackNode<>(1));
        assertEquals(false, stack.isEmpty());
    }

    @Test
    void pushMultipleValueIntoStack () {
        Stack stack = new Stack();
        stack.push(new StackNode<>(1));
        stack.push(new StackNode<>(2));
        stack.push(new StackNode<>(3));
        assertEquals(3, stack.length());
    }
    @Test
    void popOffStack () {
        Stack stack = new Stack();
        stack.push(new StackNode<>(1));
        stack.push(new StackNode<>(2));
        stack.push(new StackNode<>(3));
        assertEquals("{value=2}", stack.pop().toString());
    }

    @Test
    void emptyAfterPop () {
        Stack stack = new Stack();
        stack.push(new StackNode<>(1));
        stack.push(new StackNode<>(2));
        stack.push(new StackNode<>(3));
        stack.pop();
        stack.pop();
        stack.pop();
        assertEquals(true, stack.isEmpty());
    }

    @Test
    void instanceAnEmptyStack () {
        Stack stack = new Stack();
        assertEquals(true, stack.isEmpty());
    }

    @Test
    void callingPopInEmptyStack () {
        Stack stack = new Stack();
        assertEquals(null, stack.pop());
    }

    @Test
    void enqueueIntoQueue () {
        Queue queue = new Queue();
        queue.enqueue(new QueueNode<>(1));
        assertEquals(false, queue.isEmpty());
    }
    @Test
    void enqueueMultipleValue () {
        Queue queue = new Queue();
        queue.enqueue(new QueueNode<>(1));
        queue.enqueue(new QueueNode<>(2));
        queue.enqueue(new QueueNode<>(3));
        assertEquals(3, queue.length());
    }

    @Test
    void dequeueOutOfQueue () {
        Queue queue = new Queue();
        queue.enqueue(new QueueNode<>(1));
        queue.enqueue(new QueueNode<>(2));
        queue.enqueue(new QueueNode<>(3));
        queue.dequeue();
        assertEquals(2, queue.length());
    }

    @Test
    void peekIntoQueue () {
        Queue queue = new Queue();
        queue.enqueue(new QueueNode<>(1));
        queue.enqueue(new QueueNode<>(2));
        queue.enqueue(new QueueNode<>(3));
        assertEquals(queue.getFront(), queue.peek());
    }

    @Test
    void emptyQueueAfterMultipleDequeues () {
        Queue queue = new Queue();
        queue.enqueue(new QueueNode<>(1));
        queue.enqueue(new QueueNode<>(2));
        queue.enqueue(new QueueNode<>(3));
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        assertEquals(true, queue.isEmpty());
    }

    @Test
    void instanceEmptyQueue () {
        Queue queue = new Queue();
        assertEquals(true, queue.isEmpty());
    }

    @Test
    void callingDequeueOnEmptyQueue () {
        Queue queue = new Queue();
        assertEquals(null, queue.dequeue());
    }


}

